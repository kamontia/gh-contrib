package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"regexp"
	"time"

	"github.com/urfave/cli"
)

var GlobalFlags = []cli.Flag{}
var Commands = []cli.Command{}

func CommandNotFound(c *cli.Context, command string) {
	fmt.Fprintf(os.Stderr, "%s: '%s' is not a %s command. See '%s --help'.", c.App.Name, command, c.App.Name, c.App.Name)
	os.Exit(2)
}

// GENERATE https://mholt.github.io/json-to-go/
type AutoGenerated struct {
	TotalCount        int  `json:"total_count"`
	IncompleteResults bool `json:"incomplete_results"`
	Items             []struct {
		URL           string `json:"url"`
		RepositoryURL string `json:"repository_url"`
		LabelsURL     string `json:"labels_url"`
		CommentsURL   string `json:"comments_url"`
		EventsURL     string `json:"events_url"`
		HTMLURL       string `json:"html_url"`
		ID            int    `json:"id"`
		NodeID        string `json:"node_id"`
		Number        int    `json:"number"`
		Title         string `json:"title"`
		User          struct {
			Login             string `json:"login"`
			ID                int    `json:"id"`
			NodeID            string `json:"node_id"`
			AvatarURL         string `json:"avatar_url"`
			GravatarID        string `json:"gravatar_id"`
			URL               string `json:"url"`
			HTMLURL           string `json:"html_url"`
			FollowersURL      string `json:"followers_url"`
			FollowingURL      string `json:"following_url"`
			GistsURL          string `json:"gists_url"`
			StarredURL        string `json:"starred_url"`
			SubscriptionsURL  string `json:"subscriptions_url"`
			OrganizationsURL  string `json:"organizations_url"`
			ReposURL          string `json:"repos_url"`
			EventsURL         string `json:"events_url"`
			ReceivedEventsURL string `json:"received_events_url"`
			Type              string `json:"type"`
			SiteAdmin         bool   `json:"site_admin"`
		} `json:"user"`
		Labels            []interface{} `json:"labels"`
		State             string        `json:"state"`
		Locked            bool          `json:"locked"`
		Assignee          interface{}   `json:"assignee"`
		Assignees         []interface{} `json:"assignees"`
		Milestone         interface{}   `json:"milestone"`
		Comments          int           `json:"comments"`
		CreatedAt         time.Time     `json:"created_at"`
		UpdatedAt         time.Time     `json:"updated_at"`
		ClosedAt          time.Time     `json:"closed_at"`
		AuthorAssociation string        `json:"author_association"`
		PullRequest       struct {
			URL      string `json:"url"`
			HTMLURL  string `json:"html_url"`
			DiffURL  string `json:"diff_url"`
			PatchURL string `json:"patch_url"`
		} `json:"pull_request"`
		Body  string  `json:"body"`
		Score float64 `json:"score"`
	} `json:"items"`
}

func existUser(u string) bool {
	url := "http://github.com/" + u

	response, err := http.Get(url)
	if err != nil {
		os.Exit(2)
	}

	if response.StatusCode == 200 {
		return true
	} else {
		return false
	}
}

func validate(u string, s string, e string) {
	r := regexp.MustCompile(`^(\d{4})-(\d{2})-(\d{2})$`)

	if len(u) == 0 || len(s) == 0 || len(e) == 0 {
		fmt.Printf("-u, -s, -e is required.]\n")
		os.Exit(1)
	} else if !r.MatchString(s) || !r.MatchString(e) {
		fmt.Printf("Invalid arguments --start %s --end %s\n", s, e)
		os.Exit(1)
	} else if !existUser(u) {
		fmt.Printf("User %s is not found\n", u)
		os.Exit(1)
	} else {
		fmt.Printf("Validation is OK!\n")
	}

}

func getContrib(u string, s string, e string) string {

	url := "https://api.github.com/search/issues?q=type:pr+in:body+is:merged+merged:" + s + ".." + e + "+author:" + u

	response, err := http.Get(url)
	if err != nil {
		os.Exit(2)
	}

	defer response.Body.Close()
	body, error := ioutil.ReadAll(response.Body)
	if error != nil {
		log.Fatal(error)
	}
	return string(body)
}

func main() {
	app := cli.NewApp()
	app.Name = Name
	app.Version = Version
	app.Author = "Takeshi Kondo"
	app.Email = "take.she12@gmail.com"
	app.Usage = ""

	app.Flags = []cli.Flag{
		cli.StringFlag{
			Name:  "user, u",
			Usage: "Specify github user name",
		},
		cli.StringFlag{
			Name:  "start, s",
			Usage: "Specify start date. format is YYYY-MM-DD",
		},
		cli.StringFlag{
			Name:  "end, e",
			Usage: "Specify end date. format is YYYY-MM-DD",
		},
	}
	app.Commands = Commands
	app.CommandNotFound = CommandNotFound

	app.Action = func(c *cli.Context) error {

		/* parse arguments */
		user := c.String("user")
		startdate := c.String("start")
		enddate := c.String("end")
		validate(user, startdate, enddate)

		/* get the contribution as JSON from GitHub.com */
		result := getContrib(user, startdate, enddate)

		var _ = result // avoid build error

		/* parse json */
		jsonBytes := ([]byte)(result)
		data := new(AutoGenerated)

		if err := json.Unmarshal(jsonBytes, data); err != nil {
			fmt.Println("JSON Unmarshal error:", err)
			os.Exit(1)
		}

		/* sample */
		for _, v := range data.Items {
			fmt.Println("*** TITLE ***")
			fmt.Println(v.Title)
			fmt.Println("*** STATE ***")
			fmt.Println(v.State)
			fmt.Println("")
		}

		/* put std.out */

		return nil
	}
	app.Run(os.Args)
}
